// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using coreWebApiTest.Context;

namespace coreWebApiTest.Migrations
{
    [DbContext(typeof(EmployeeContext))]
    partial class EmployeeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("coreWebApiTest.Models.Company", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Name");

                    b.Property<string>("State");

                    b.Property<int>("ZipCode");

                    b.Property<DateTime>("activatedBy");

                    b.Property<DateTime>("activatedOn");

                    b.Property<Guid>("createdBy");

                    b.Property<DateTime>("createdOn");

                    b.Property<DateTime>("deactivatedBy");

                    b.Property<DateTime>("deactivatedOn");

                    b.Property<Guid>("deleteBy");

                    b.Property<DateTime>("deletedOn");

                    b.Property<bool>("isActive");

                    b.Property<bool>("isdelete");

                    b.Property<Guid>("updatedBy");

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("CompanyId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("coreWebApiTest.Models.Employee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("Dob");

                    b.Property<string>("Email");

                    b.Property<string>("Gender");

                    b.Property<Guid?>("JobDesId");

                    b.Property<long>("MobileNo");

                    b.Property<string>("Name");

                    b.Property<string>("State");

                    b.Property<int>("ZipCode");

                    b.Property<DateTime>("activatedBy");

                    b.Property<DateTime>("activatedOn");

                    b.Property<Guid>("createdBy");

                    b.Property<DateTime>("createdOn");

                    b.Property<DateTime>("deactivatedBy");

                    b.Property<DateTime>("deactivatedOn");

                    b.Property<Guid>("deleteBy");

                    b.Property<DateTime>("deletedOn");

                    b.Property<bool>("isActive");

                    b.Property<bool>("isdelete");

                    b.Property<Guid>("updatedBy");

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("EmployeeId");

                    b.HasIndex("JobDesId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("coreWebApiTest.Models.JobDes", b =>
                {
                    b.Property<Guid>("JobDesId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<Guid?>("OfficeId");

                    b.Property<DateTime>("activatedBy");

                    b.Property<DateTime>("activatedOn");

                    b.Property<Guid>("createdBy");

                    b.Property<DateTime>("createdOn");

                    b.Property<DateTime>("deactivatedBy");

                    b.Property<DateTime>("deactivatedOn");

                    b.Property<Guid>("deleteBy");

                    b.Property<DateTime>("deletedOn");

                    b.Property<bool>("isActive");

                    b.Property<bool>("isdelete");

                    b.Property<Guid>("updatedBy");

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("JobDesId");

                    b.HasIndex("OfficeId");

                    b.ToTable("JobDes");
                });

            modelBuilder.Entity("coreWebApiTest.Models.Office", b =>
                {
                    b.Property<Guid>("OfficeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<Guid?>("CompanyId");

                    b.Property<string>("Country");

                    b.Property<string>("Name");

                    b.Property<string>("State");

                    b.Property<int>("ZipCode");

                    b.Property<DateTime>("activatedBy");

                    b.Property<DateTime>("activatedOn");

                    b.Property<Guid>("createdBy");

                    b.Property<DateTime>("createdOn");

                    b.Property<DateTime>("deactivatedBy");

                    b.Property<DateTime>("deactivatedOn");

                    b.Property<Guid>("deleteBy");

                    b.Property<DateTime>("deletedOn");

                    b.Property<bool>("isActive");

                    b.Property<bool>("isdelete");

                    b.Property<Guid>("updatedBy");

                    b.Property<DateTime>("updatedOn");

                    b.HasKey("OfficeId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("coreWebApiTest.Models.Employee", b =>
                {
                    b.HasOne("coreWebApiTest.Models.JobDes", "JobDes")
                        .WithMany()
                        .HasForeignKey("JobDesId");
                });

            modelBuilder.Entity("coreWebApiTest.Models.JobDes", b =>
                {
                    b.HasOne("coreWebApiTest.Models.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("coreWebApiTest.Models.Office", b =>
                {
                    b.HasOne("coreWebApiTest.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });
#pragma warning restore 612, 618
        }
    }
}
